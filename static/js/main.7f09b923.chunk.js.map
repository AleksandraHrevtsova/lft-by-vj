{"version":3,"sources":["components/Posts/PostFilter.module.css","components/Posts/PostsList.module.css","components/Posts/Post.module.css","components/Posts/PrioritySelector.js","utils/Priority.js","components/Posts/PostEditor.js","components/Posts/PostFilter.js","components/Posts/Post.js","components/Posts/PostsList.js","App.js","serviceWorker.js","index.js","components/Posts/PostEditor.module.css"],"names":["module","exports","PrioritySelector","options","value","onChange","name","map","option","key","Object","freeze","LOW","NORMAL","HIGH","values","Priority","PostEditor","state","text","priority","handleChange","e","setState","target","handleSubmit","preventDefault","props","onAddPost","this","className","classes","form","onSubmit","input","type","placeholder","label","Component","PostFilter","onChangeFilter","Post","id","completed","onDeletePost","onUpdateCompleted","onUpdatePriority","styles","task","actions","onClick","defaultChecked","PostsList","items","onUpdateComleted","length","list","item","containerStyles","maxWidth","minWidth","marginLeft","marginRight","App","posts","filter","changeFilter","addPost","post","postToAdd","shortid","generate","deletePost","updateCompleted","updatePriority","console","log","persistedPosts","localStorage","getItem","JSON","parse","prevProps","prevState","setItem","stringify","filteredPosts","toLowerCase","includes","filterPosts","style","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7f09b923.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"PostFilter_input__mCVFY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"PostsList_list__r7vvy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__3lz6p\",\"lowPriority\":\"Post_lowPriority__7pr9_\",\"normalPriority\":\"Post_normalPriority__2aBn7\",\"highPriority\":\"Post_highPriority__1S3JA\",\"text\":\"Post_text__g9-7r\",\"actions\":\"Post_actions__2FFg7\"};","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst PrioritySelector = ({ options, value, onChange }) => (\n  <select name=\"priority\" value={value} onChange={onChange}>\n    {options.map(option => (\n      <option key={option} value={option}>\n        {option}\n      </option>\n    ))}\n  </select>\n);\n\nPrioritySelector.propTypes = {\n  options: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default PrioritySelector;\n","export default Object.freeze({\n  LOW: 'low',\n  NORMAL: 'normal',\n  HIGH: 'high',\n});\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport PrioritySelector from './PrioritySelector';\nimport Priority from '../../utils/Priority';\nimport classes from './PostEditor.module.css';\n\nconst options = Object.values(Priority);\n\nexport default class PostEditor extends Component {\n  static propTypes = {\n    onAddPost: PropTypes.func.isRequired,\n  };\n\n  state = {\n    text: '',\n    priority: Priority.NORMAL,\n  };\n\n  handleChange = e => {\n    this.setState({\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n\n    this.props.onAddPost({ ...this.state });\n    this.setState({\n      text: '',\n      priority: Priority.NORMAL,\n    });\n  };\n\n  render() {\n    const { text, priority } = this.state;\n\n    return (\n      <form className={classes.form} onSubmit={this.handleSubmit}>\n        <input\n          className={classes.input}\n          type=\"text\"\n          name=\"text\"\n          value={text}\n          onChange={this.handleChange}\n          placeholder=\"Enter poet content...\"\n        />\n        <label className={classes.label}>\n          Select tast priority:\n          <PrioritySelector\n            options={options}\n            value={priority}\n            onChange={this.handleChange}\n          />\n        </label>\n\n        <button type=\"submit\">Create</button>\n      </form>\n    );\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classes from './PostFilter.module.css';\n\nconst PostFilter = ({ value, onChangeFilter }) => (\n  <input\n    type=\"text\"\n    className={classes.input}\n    value={value}\n    onChange={onChangeFilter}\n    placeholder=\"Type to filter posts...\"\n  />\n);\n\nPostFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChangeFilter: PropTypes.func.isRequired,\n};\n\nexport default PostFilter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport PrioritySelector from './PrioritySelector';\nimport Priority from '../../utils/Priority';\nimport styles from './Post.module.css';\n\nconst options = Object.values(Priority);\n\nconst Post = ({\n  id,\n  text,\n  priority,\n  completed,\n  onDeletePost,\n  onUpdateCompleted,\n  onUpdatePriority,\n}) => (\n  <div className={`${styles.task} ${styles[`${priority}Priority`]}`}>\n    <p className={styles.text}>{text}</p>\n\n    <hr />\n    <div className={styles.actions}>\n      <button type=\"button\" onClick={onDeletePost}>\n        Delete\n      </button>\n\n      <PrioritySelector\n        options={options}\n        value={priority}\n        onChange={e => onUpdatePriority(id, e.target.value)}\n      />\n\n      <label>\n        Completed:\n        <input\n          type=\"checkbox\"\n          defaultChecked={completed}\n          onChange={onUpdateCompleted}\n        />\n      </label>\n    </div>\n  </div>\n);\n\nPost.propTypes = {\n  id: PropTypes.string.isRequired,\n  text: PropTypes.string.isRequired,\n  priority: PropTypes.string.isRequired,\n  completed: PropTypes.bool.isRequired,\n  onDeletePost: PropTypes.func.isRequired,\n  onUpdateCompleted: PropTypes.func.isRequired,\n  onUpdatePriority: PropTypes.func.isRequired,\n};\n\nexport default Post;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Post from './Post';\nimport classes from './PostsList.module.css';\n\nconst PostsList = ({\n  items,\n  onDeletePost,\n  onUpdateComleted,\n  onUpdatePriority,\n}) =>\n  items.length > 0 && (\n    <ul className={classes.list}>\n      {items.map(item => (\n        <li key={item.id}>\n          <Post\n            {...item}\n            onDeletePost={() => onDeletePost(item.id)}\n            onUpdateComleted={() => onUpdateComleted(item.id)}\n            onUpdatePriority={onUpdatePriority}\n          />\n        </li>\n      ))}\n    </ul>\n  );\n\nPostsList.propTypes = {\n  items: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n  onDeletePost: PropTypes.func.isRequired,\n  onUpdateComleted: PropTypes.func.isRequired,\n  onUpdatePriority: PropTypes.func.isRequired,\n};\n\nexport default PostsList;\n","import React, { Component } from 'react';\nimport shortid from 'shortid';\n// import { connect } from 'react-redux';\n// import { Route } from 'react-router-dom';\n// import Header from './components/Header/Header';\n// import Counter from './components/Counter/Counter';\n// import Dropdown from './components/Dropdown/Dropdown';\n// import MessageUpdater from './components/MessageUpdater/MessageUpdater';\n// import Input from './components/Input/Input';\n// import SignUpForm from './components/SignUpForm/SignUpForm';\nimport PostEditor from './components/Posts/PostEditor';\nimport PostFilter from './components/Posts/PostFilter';\nimport PostsList from './components/Posts/PostsList';\n// import classes from './App.css';\n\nconst containerStyles = {\n  maxWidth: 1200,\n  minWidth: 800,\n  marginLeft: 'auto',\n  marginRight: 'auto',\n};\n\nconst filterPosts = (posts, filter) => {\n  return posts.filter(post =>\n    post.text.toLowerCase().includes(filter.toLowerCase()),\n  );\n};\n\nexport default class App extends Component {\n  state = {\n    posts: [],\n    filter: '',\n  };\n\n  componentDidMount() {\n    console.log('componentDidMount');\n    const persistedPosts = localStorage.getItem('posts');\n\n    if (persistedPosts) {\n      const posts = JSON.parse(persistedPosts);\n\n      this.setState({ posts });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    console.log('componentDidUpdate');\n\n    const { posts } = this.state;\n\n    if (prevState.posts !== posts) {\n      localStorage.setItem('posts', JSON.stringify(posts));\n    }\n  }\n\n  changeFilter = e => {\n    this.setState({ filter: e.target.value });\n  };\n\n  addPost = post => {\n    const postToAdd = {\n      ...post,\n      id: shortid.generate(),\n      completed: false,\n    };\n    // добавление элементов в коллекцию\n    this.setState(state => ({\n      posts: [...state.posts, postToAdd],\n    }));\n  };\n\n  deletePost = id => {\n    this.setState(state => ({\n      posts: state.posts.filter(post => post.id !== id),\n    }));\n  };\n\n  updateCompleted = id => {\n    this.setState(state => ({\n      posts: state.posts.map(post =>\n        post.id === id ? { ...post, completed: !post.completed } : post,\n      ),\n    }));\n  };\n\n  updatePriority = (id, priority) => {\n    this.setState(state => ({\n      posts: state.posts.map(post =>\n        post.id === id ? { ...post, priority } : post,\n      ),\n    }));\n  };\n  // handleSignUp = credentials => {\n  //   console.log(credentials);\n  // };\n\n  render() {\n    console.log('render');\n    const { posts, filter } = this.state;\n    const filteredPosts = filterPosts(posts, filter); // отфильтрованный массив данных\n\n    return (\n      <div style={containerStyles}>\n        {/* <Counter step={1} initialValue={5} />\n        <Dropdown isOpen={false} />\n        <MessageUpdater />\n        <Input />\n        <SignUpForm onSignUp={this.handleSignUp} /> */}\n        <PostEditor onAddPost={this.addPost} />\n        <hr />\n        <PostFilter value={filter} onChangeFilter={this.changeFilter} />\n        <PostsList\n          items={filteredPosts}\n          onDeletePost={this.deletePost}\n          onUpdateComleted={this.updateCompleted}\n          onUpdatePriority={this.updatePriority}\n        />\n        {/* <Route exact path=\"/\" component={Header} /> */}\n        {/* <Switch /> */}\n      </div>\n    );\n  }\n}\n\n// App.propTypes = {};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './stylesheet/main.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"PostEditor_form__bySpn\",\"label\":\"PostEditor_label__1qJW4\",\"input\":\"PostEditor_input__30oxT\"};"],"sourceRoot":""}